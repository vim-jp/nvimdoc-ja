*mbyte.txt*     Nvim 0.12        Last change: 2025-08-24


		  VIMリファレンスマニュアル	  by Bram Moolenaar et al.


マルチバイトサポート				*multibyte* *multi-byte*
						*Chinese* *Japanese* *Korean*
このファイルでは、中国語、日本語、韓国語などの、1バイト(オクテット)では表現す
ることができないほど多くの文字を持つ言語の、テキストの編集について説明する。
Unicodeについても説明する。

ユーザーマニュアルの |usr_45.txt| で、共通する事柄を簡単に紹介している。
メッセージやメニューの言語を変更するには |mlang.txt| を参照。

                                            目次を確認するには |gO| をタイプ。

==============================================================================
はじめに						*mbyte-first*

これは Nvim のマルチバイト機能の概要である。


☆ロケール

まずは、ロケールが正く設定されていることを確認する。システムの言語が正しく設定
されていれば、マルチバイト機能をすぐに使用することができる。設定されてなくて
も、環境変数$LANGをシェルから設定すれば、大抵は使用できるようになる: >

	setenv LANG ja_JP.EUC

不幸なことに、ロケールの名前はシステムごとに違う。日本語なら "ja_JP.EUCjp" や
"ja" などがある。現在の設定を確認するには: >

	:language

Vimが内部で使用するロケールを変更するには: >

	:language ja_JP.EUC

その設定が機能しない場合はエラーメッセージが表示される。使用したい言語のロケー
ル名を見付けるためにいくつか試してみると良い。しかし、Vimは起動時にシステムの
ロケールを適切に使用するので、シェルでロケールを設定するのが無難である。

詳細は|mbyte-locale|を参照。


☆エンコーディング

Nvim は内部的に常に UTF-8 を使用する。そのため、 'encoding' は常に "utf-8"に設
定されており、変更することはできない。

Vim 内で使用されるすべてのテキストは UTF-8 である。バッファ内のテキストだけで
なく、レジスタや変数などのテキストも同様である。

UTF-8 とは違うエンコーディングのファイルも編集することができる。Vim はファイル
を開くときにエンコーディングを変換し、保存するときに元に戻す。 'fileencoding'、
'fileencodings'、 |++enc| を参照。


☆表示とフォント

端末(のエミュレータ)で作業しているなら、端末が、Vimと同じエンコーディングであ
る UTF-8 を使用することを確認する。そうでなければ、ASCII 文字のみが正しく表示
され、編集できる。

GUIで作業しているなら、UTF-8 に対応したフォントを選択する必要がある。
'guifont' と 'guifontwide' を設定することもできる。 'guifont' は半角文字、
'guifontwide' は全角文字のためのフォントである。 'guifontwide' のフォントは
'guifont' のちょうど2倍の幅でなければならない。
UTF-8使用時の設定例: >

	:set guifont=-misc-fixed-medium-r-normal-*-18-120-100-100-c-90-iso10646-1
	:set guifontwide=-misc-fixed-medium-r-normal-*-18-120-100-100-c-180-iso10646-1

'guifont' だけを設定した場合、Nvim の GUI は 'guifontwide' として使用できる
フォントを見付けようとする。


☆入力

マルチバイト文字を入力するにはいくつかの方法がある:
- システムの IME を使用できる。
- キーマップを使用できる。 |mbyte-keymap| を参照。

オプション 'iminsert'、 'imsearch'、 'imcmdline' を使用して、別の入力方法に切
り替えたり、インプットメソッドを一時的に無効にしたりできる。

==============================================================================
ロケール						*mbyte-locale*

最も簡単なのは、システム全体のロケールを設定することである。しかし、作業してい
るシェルのみロケールを変更したり、Vimだけが特定のロケールを使用するようにも設
定できる。


☆ロケールって何？					*locale*

世界にはたくさんの言語があり、少なくとも、それと同じ数だけ文化や環境がある。地
域に対応した言語環境のことをロケール(locale)という。ロケールは、言語、文字セッ
ト、文字の整列順、日付の書式、通貨の書式、などの情報を含んでいる。Vimにとって
は言語と文字セットの情報だけが重要である。

システムがサポートしているロケールのみ使用することができる。(特にアメリカなど
では)ほんの少しのロケールしか持っていないシステムもある。そのため、望みの言語
を使用することができないかもしれない。追加パッケージでロケールをインストールで
きることもあるので、システムのドキュメントを確認すること。

ロケールがインストールされている場所はシステムによりさまざまである。例えば
"/usr/share/locale" や "/usr/lib/locale" などにある場合がある。システムのマニュ
アルのsetlocale()を参照。

ロケールがインストールされているディレクトリを見ればロケールの正しい名前がわか
る。ほとんどの場合、大文字と小文字は区別されるので、例えば "ja_JP.EUC" と
"ja_jp.euc" は異なる。いくつかのシステムはlocale.aliasというファイルを持ってい
て、"nl" のような短い名前を使って "nl_NL.ISO_8859-1" という完全な名前を指定で
きる。

Note: X-Windowは独自のロケール機構を持っている。そして不幸なことに、他で使用さ
れているものとは違うロケール名を使用する。これは混乱の元である。Vimにとっては
関数setlocale()が使用するものが重要であり、それは通常、X-Windowのものではない。
何が実際に機能するのか、実験してみる必要があるかもしれない。

							*locale-name*
ロケール|locale|の名前の(簡単な)書式は:

	言語			(language)
or	言語_地域		(language_territory)
or	言語_地域.コードセット	(language_territory.codeset)

地域は国を意味する(あるいはその地方)。コードセットは|charset|のこと。例えば、
ロケール名 "ja_JP.eucJP" の意味は:
	ja	言語は日本語(Japanese)
	JP	国は日本(Japan)
	eucJP	コードセットはEUC-JP
同じ意味でも "ja"、"ja_JP.EUC"、"ja_JP.ujis" などの名前のこともある。不幸なこ
とに、言語、地域、コードセット、を表す名前は統一されておらず、システムによって
異なる。

ロケール名の例:
    charset	    language		  locale name ~
    GB2312	    中国語 (簡体字)	  zh_CN.EUC, zh_CN.GB2312
    Big5	    中国語 (繁体字)	  zh_TW.BIG5, zh_TW.Big5
    CNS-11643	    中国語 (繁体字)	  zh_TW
    EUC-JP	    日本語		  ja, ja_JP.EUC, ja_JP.ujis, ja_JP.eucJP
    Shift_JIS	    日本語		  ja_JP.SJIS, ja_JP.Shift_JIS
    EUC-KR	    韓国語		  ko, ko_KR.EUC


☆ロケールを使用する

システム全体のロケールを設定するには、システムのドキュメントを参照。恐らく、
"/etc" 内の設定ファイルを編集する必要がある。

シェルのロケールを設定するには、環境変数$LANGを設定する。例えば、韓国語を使用
するとき、ロケール |locale| の名前が "ko" なら、このように設定する:

    sh:    export LANG=ko
    csh:   setenv LANG ko

これを~/.profileや~/.cshrcに書いておけばいつでも設定された状態にできる。

Vimが使用するロケールだけ設定するには |:language| コマンドを使う: >

	:language ko

これを |init.vim| に書いておけばいつでも設定された状態にできる。

あるいは、特定の$LANGを設定した状態でVimを起動するには:

   sh:    LANG=ko vim {vim-arguments}
   csh:	  env LANG=ko vim {vim-arguments}

このために、小さなシェルスクリプトを作成することもできる。

==============================================================================
3.  エンコーディング (Encoding)		*mbyte-encoding*

Nvimは常に UTF-8 を内部で使用するエンコーディングとして使用する。バッファ(メモ
リに読み込まれたファイル)やレジスタ、変数など、すべてのテキストはこのエンコー
ディングでメモリに保存される。

							*charset* *codeset*
文字セット(Charset)とコードセット(codeset)は「エンコーディング」の別名である。
正確には違うのだが、Vimを使用する上でそれは重要ではない。

文字は1バイト以上のバイトでエンコードされる。すべての文字が1バイトでエンコード
されるものを私達はシングルバイトエンコーディングと呼ぶ。そのようなエンコーディ
ングとしては "latin1" がよく使用される。これは256文字を表現することができる。
それには制御文字も含むので、テキストとして使用できる文字はそれより少ない。

2バイト以上を使って文字を表現するものを、私達はマルチバイトエンコーディングと
呼ぶ。これは256文字よりもっと多くの文字を表現することができ、ほとんどの東アジ
アの言語はこれを必要とする。

ほとんどのマルチバイトエンコーディングは127文字(ASCII文字の範囲)を1バイトで表
現するため、使用する言語に関係なく、ASCII文字だけのテキストをやり取りすること
が簡単になっている。したがって、間違ったエンコーディングが設定されていても、そ
れを読むことができるだろう。

							*encoding-names*
Nvim はファイルの編集に様々なエンコーディングを使用することができる。大きく3つ
に分類すると:

1   8bit	シングルバイトエンコーディング。256文字を表現できる。アメリカ
		やヨーロッパで使用される。例: ISO-8859-1 (Latin1)。すべての文
		字は1つ分の表示幅で表示される。(いわゆる半角)

2   2byte	ダブルバイトエンコーディング。10000以上の文字を表現できる。ア
		ジアの国々で使用される。例: euc-kr (韓国語)。文字のバイト数と
		同じ数の表示幅で表示される。(2バイトならいわゆる全角)
		(euc-jpの1バイト目が0x8eの文字(半角カナ)は例外)

u   Unicode	ユニバーサルエンコーディング。他のエンコーディングを統合するも
		の。ISO 10646。100万以上の文字を表現できる。例: UTF-8。文字が
		使用するバイト数と表示幅の関係は複雑。

UTF-8 以外はVim内部のエンコーディングとして使用することはできないが、そのよう
なエンコーディングのファイルを編集することはできる。 'fileencoding' を参照。

'fileencoding' が認識できる値:				*encoding-values*
1   latin1	8ビット文字 (ISO 8859-1 及び cp1252)
1   iso-8859-n	ISO_8859 シリーズ (n = 2 to 15)
1   koi8-r	ロシア語
1   koi8-u	ウクライナ語
1   macroman    MacRoman (Macintoshのエンコーディング)
1   8bit-{name} 8ビットエンコーディングのどれか (Vim特有の名前)
1   cp437	iso-8859-1に類似
1   cp737	iso-8859-7に類似
1   cp775	バルト語
1   cp850	iso-8859-4に類似
1   cp852	iso-8859-1に類似
1   cp855	iso-8859-2に類似
1   cp857	iso-8859-5に類似
1   cp860	iso-8859-9に類似
1   cp861	iso-8859-1に類似
1   cp862	iso-8859-1に類似
1   cp863	iso-8859-8に類似
1   cp865	iso-8859-1に類似
1   cp866	iso-8859-5に類似
1   cp869	iso-8859-7に類似
1   cp874	タイ語
1   cp1250	チェコ語、ポーランド語など
1   cp1251	キリル語
1   cp1253	ギリシャ語
1   cp1254	トルコ語
1   cp1255	ヘブライ語
1   cp1256	アラビア語
1   cp1257	バルト語
1   cp1258	ベトナム語
1   cp{number}	MS-Windows: インストールされているシングルバイトのコードページ
2   cp932	日本語 (Windows only)
2   euc-jp	日本語
2   sjis	日本語
2   cp949	韓国語
2   euc-kr	韓国語
2   cp936	簡体中国語 (Windows only)
2   euc-cn	簡体中国語
2   cp950	繁体中国語 (alias for big5)
2   big5	繁体中国語 (alias for cp950)
2   euc-tw	繁体中国語
2   2byte-{name} ダブルバイトエンコーディングのどれか (Vim特有の名前)
2   cp{number}	MS-Windows: インストールされているダブルバイトのコードページ
u   utf-8	UTF-8にエンコードされた32ビットのUnicode (ISO/IEC 10646-1)
u   ucs-2	UCS-2にエンコードされた16ビットのUnicode (ISO/IEC 10646-1)
u   ucs-2le	リトルエンディアンのucs-2
u   utf-16	ucs-2を拡張してさらに多くの文字を表現できるようにしたもの
u   utf-16le	リトルエンディアンのutf-16
u   ucs-4	UCS-4にエンコードされた32ビットのUnicode (ISO/IEC 10646-1)
u   ucs-4le	リトルエンディアンのucs-4

{name}にはシステムがサポートしているエンコーディングの名前を入れることができ
る。これらの名前はファイルのエンコーディングと UTF-8 のエンコーディングを変換
するときにiconv()に渡される。MS-Windowsでは "cp{number}" はコードページ番号で
ある。
例: >
		:set fileencoding=8bit-cp1252
		:set fileencoding=2byte-cp932

MS-Windows のコードページ 1252 は latin1 と良く似ている。実用的な理由から、二
つは同じエンコーディングとして扱われ、latin1 と呼ばれる。0x80 - 0xA0 の文字を
表示するかしないかは 'isprint' で設定できる。

いくつかの別名を使用できる。別名は上記の名前のどれかとして解釈される。
完全ではないが一覧を示す:

1   ansi	latin1と同じ (廃止。後方互換性のために残されている)
2   japan	日本語: euc-jp
2   korea	韓国語: euc-kr
2   prc		簡体中国語: euc-cn
2   chinese     prcと同じ
2   taiwan	繁体中国語: euc-tw
u   utf8	utf-8と同じ
u   unicode	ucs-2と同じ
u   ucs2be	ucs-2と同じ (ビッグエンディアン)
u   ucs-2be	ucs-2と同じ (ビッグエンディアン)
u   ucs-4be	ucs-4と同じ (ビッグエンディアン)
u   utf-32	ucs-4と同じ
u   utf-32le	ucs-4leと同じ
    default     現在のロケールのエンコーディング

UCSコードにはバイト順の問題がある。これは扱いが難しいので、可能なときにはいつ
でもUTF-8を使用した方が良い。指定がなければビッグエンディアンを使用する(最上位
バイトが最初にくる):
	    名前	バイト列	文字 ~
	    ucs-2	      11 22	    1122
	    ucs-2le	      22 11	    1122
	    ucs-4	11 22 33 44	11223344
	    ucs-4le	44 33 22 11	11223344

MS-WindowsはリトルエンディアンのUCS-2を使用するので、MS-Windowsでは主に
"ucs-2le" を使う。

良く似ているが区別されているエンコーディングがある。Vimはそれらを別のエンコー
ディングとして扱うため、エンコーディングの変換が行われる。エンコーディングの変
換ができないときや、よけいな変換を防ぎたいときは、他の名前を使う必要があるかも
しれない:

	cp932, shift-jis, sjis
	cp936, euc-cn

☆エンコーディングの変換					*charset-conversion*

Vimはいろいろな場面で自動的にエンコーディングを変換する:
- ファイルを読み込むとき、 'fileencoding' が UTF-8 ではない場合
- ファイルを書き込むとき、 'fileencoding' が UTF-8 ではない場合
- メッセージを表示するとき、LC_MESSAGESのエンコーディングが UTF-8 ではない場合
  (gettextのサポートが必要)。
- Vim script を読み込むとき、|:scriptencoding|が UTF-8 ではない場合
ほとんどの変換は iconv の機能が必要である。ファイルを読み書きするときの変換の
動作はオプション 'charconvert' での指定もできる。

エンコーディングを変換するための便利なユーティリティ:
    All:	    iconv
	GNU iconvはほぼすべてのエンコーディングを変換できる。変換の中間層に
	Unicodeを使用することで、多くの変換を可能にしている。
	https://directory.fsf.org/wiki/Libiconv を参照。


							*mbyte-conversion*
UTF-8 ではないエンコーディングのファイルを読み書きするときは、エンコーディング
を変換する必要がある。次の変換がサポートされている:
- Latin-1 (ISO-8859-1)、UTF-8、UCS-2、UCS-4の間の変換はVimが自前で行う。
- MS-Windowsでは、各コードページは機能する。
- 'charconvert' による変換。
- 可能であれば、iconvライブラリを使用して変換することができる。
	古いバージョンのGNU iconv()では変換が失敗することがある(Vimが用意する
	バッファよりも、はるかに大きなバッファを要求するため)。
	その場合は他のiconv()実装を試すこと。

==============================================================================
キーマップでの入力					*mbyte-keymap*

キーボードから入力できない文字がある場合にはオプション 'keymap' を使う。一つ以
上の(英語の)文字を入力することで、別の(非英語の)文字を入力することができる。こ
の機能はテキストを入力するときだけ作用する。Vimコマンドを入力するときには作用
しない。そのため、キーボードの設定を切り替える手間がない。
{Vimが |+keymap| 機能付きでコンパイルされたときにのみ利用可能}

オプション 'keymap' に、使用したいキーマップファイルを指定する。ファイルの名前
は次の二つのうちのどちらか:

	keymap/{keymap}_utf-8.vim
	keymap/{keymap}.vim

{keymap}はオプション 'keymap' に設定する値。"utf-8" 付きのファイル名が優先して
使われる。

キーマップファイルを探すために 'runtimepath' が使われる。利用可能なすべてのキー
マップファイルを一覧するには、このようにする: >
	:echo globpath(&rtp, "keymap/*.vim")

挿入モードとコマンドラインモードでは、CTRL-^を使ってキーマップを使用するかどう
かを切り換えることができる。|i_CTRL-^| |c_CTRL-^|
挿入モードでは、キーマップの状態はオプション 'iminsert' に記憶される。挿入モー
ドから抜けて、再び挿入モードに入ったときに、以前の状態が使われる。 |f| や |r|
などの一つの文字を引数に取るコマンドでも同じ値が使われる。
コマンドラインモードでは、キーマップの状態は記憶されない。コマンドラインモード
に入るとまず、(ASCII文字の)Exコマンドを入力するはずだからである。
検索パターンの入力では、オプション 'imsearch' が使われる。 'iminsert' と設定を
共有するように設定することもできる。
								*lCursor*
キーマップ(言語マップ)を使用中に、GUIカーソルの色を変えることができる。もし
も、非標準な背景色を使用していた場合にカーソルが見えなくなることがないように、
初期状態ではこの機能は無効になっている。次の例では、カーソルの色が明るくなるよ
うにしている: >
	:highlight Cursor guifg=NONE guibg=Green
	:highlight lCursor guifg=NONE guibg=Cyan
<
		*keymap-file-format* *:loadk* *:loadkeymap* *E105* *E791*
キーマップファイルはこのような構成になっている: >

	" Maintainer:	name <email@address>
	" Last Changed:	2001 Jan 1

	let b:keymap_name = "short"

	loadkeymap
	a	A
	b	B	comment

「"」で始まる行はコメントなので無視される。空白行も無視される。マップを定義す
る行には役に立つコメントを書くことができる。

"b:keymap_name" にはステータスラインに表示される短い名前を設定できる。'keymap'
の値は、言語の違いやキーボードやエンコーディングの違いを区別するために長くなり
がちだが、ステータスラインに表示できる文字には限りがあるので、この変数を使う。

実際のマップは "loadkeymap" 以下に書く。上の例では、"a" は "A" に、"b" は "B"
にマップされる。このように、一番目のものが二番目にマップされる。そして、ファイ
ルの末尾まで同じように処理される。
このように設定したマップは、 |:lmap| に "<buffer>" を指定したバッファローカルな
マップとまったく同じである。
それはこのコマンドで確認できる: >
	:lmap
二つの項目は空白で区切る。マップに空白を含めるには、"<Tab>"、"<Space>" という
特別な表記を使う。二つの項目の文字の長さは、合わせて200バイトを超えてはいけな
い。

一番目の項目に複数の文字を指定することができる。これはデッドキーのような作用を
する。例: >
	'a	á
クォートの入力があったとき、次に "a" が入力されるかどうかわからないので、Vimは
次の文字が入力されるまで待機する。シングルクォートを入力できるようにするには、
次の行も加える: >
	''	'
マップは |:lmap| で定義されるので、結果のクォート文字は、他の 'keymap' で定義さ
れた文字を開始文字としては扱われない。これは標準の |:imap| のマップで使用できる。
{訳注: > シングルクォートを入力できるようにするには...
       'timeout' も参照。}
"accents" キーマップはこれを使用する。			*keymap-accents*

最初の列は |<>| 表記で書くこともできる:
	<C-c>		Ctrl-C
	<A-c>		Alt-c
	<A-C>		Alt-C
Note: Alt マッピングは機能しないことがある。それはキーボードや端末に依存する。

二番目の項目に複数の文字を指定することもできるが、一般的ではない。しか
し、文字を指定するのにいろいろな方法を使用して構わない: >
	A	a		literal character
	A	<char-97>	decimal value
	A	<char-0x61>	hexadecimal value
	A	<char-0141>	octal value
	x	<Space>		special key name

文字は現在の UTF-8 と同じエンコーディングであるものとして扱われる。
":scriptencoding" でリテラル文字のエンコーディングを指定することができるが、
<char->表記の文字には影響しない。なぜなら、キーマップファイルのエンコーディン
グが変換されるのであって、<char->の結果の文字は変換されないからである。

"loadkeymap" 以下の行は 'cpoptions' に "C" を設定した状態で解釈される。つまり、
行の継続は使用されない。バックスラッシュは特殊文字として扱われる。例: >

	" a comment line
	\"	x	" を x へマップ
	\\	y	\ を y へマップ

他の人にも便利なキーマップファイルを作成したら、Vimの配布物に含めるために、Vim
のメンテナーに提出することを検討していただきたい:
<maintainer@vim.org>


☆ヘブライ語キーマップ					*keymap-hebrew*

このファイルはUTF-8とCP1255のエンコーディングで利用可能な文字と、その文字を入
力するためのキーマップを説明している:

glyph   encoding	   keymap ~
Char UTF-8 cp1255  hebrew  hebrewp  name ~
א    0x5d0  0xe0     t	      a     alef
ב    0x5d1  0xe1     c	      b     bet
ג    0x5d2  0xe2     d	      g     gimel
ד    0x5d3  0xe3     s	      d     dalet
ה    0x5d4  0xe4     v	      h     he
ו    0x5d5  0xe5     u	      v     vav
ז    0x5d6  0xe6     z	      z     zayin
ח    0x5d7  0xe7     j	      j     het
ט    0x5d8  0xe8     y	      T     tet
י    0x5d9  0xe9     h	      y     yod
ך    0x5da  0xea     l	      K     kaf sofit
כ    0x5db  0xeb     f	      k     kaf
ל    0x5dc  0xec     k	      l     lamed
ם    0x5dd  0xed     o	      M     mem sofit
מ    0x5de  0xee     n	      m     mem
ן    0x5df  0xef     i	      N     nun sofit
נ    0x5e0  0xf0     b	      n     nun
ס    0x5e1  0xf1     x	      s     samech
ע    0x5e2  0xf2     g	      u     ayin
ף    0x5e3  0xf3     ;	      P     pe sofit
פ    0x5e4  0xf4     p	      p     pe
ץ    0x5e5  0xf5     .	      X     tsadi sofit
צ    0x5e6  0xf6     m	      x     tsadi
ק    0x5e7  0xf7     e	      q     qof
ר    0x5e8  0xf8     r	      r     resh
ש    0x5e9  0xf9     a	      w     shin
ת    0x5ea  0xfa     ,	      t     tav

Vowel marks and special punctuation:
הְ    0x5b0  0xc0     A:      A:   sheva
הֱ    0x5b1  0xc1     HE      HE   hataf segol
הֲ    0x5b2  0xc2     HA      HA   hataf patah
הֳ    0x5b3  0xc3     HO      HO   hataf qamats
הִ    0x5b4  0xc4     I       I    hiriq
הֵ    0x5b5  0xc5     AY      AY   tsere
הֶ    0x5b6  0xc6     E       E    segol
הַ    0x5b7  0xc7     AA      AA   patah
הָ    0x5b8  0xc8     AO      AO   qamats
הֹ    0x5b9  0xc9     O       O    holam
הֻ    0x5bb  0xcb     U       U    qubuts
כּ    0x5bc  0xcc     D       D    dagesh
הֽ    0x5bd  0xcd     ]T      ]T   meteg
ה־   0x5be  0xce     ]Q      ]Q   maqaf
בֿ    0x5bf  0xcf     ]R      ]R   rafe
ב׀   0x5c0  0xd0     ]p      ]p   paseq
שׁ    0x5c1  0xd1     SR      SR   shin-dot
שׂ    0x5c2  0xd2     SL      SL   sin-dot
׃    0x5c3  0xd3     ]P      ]P   sof-pasuq
װ    0x5f0  0xd4     VV      VV   double-vav
ױ    0x5f1  0xd5     VY      VY   vav-yod
ײ    0x5f2  0xd6     YY      YY   yod-yod

The following are only available in UTF-8

Cantillation marks:
glyph
Char UTF-8 hebrew name
ב֑    0x591   C:   etnahta
ב֒    0x592   Cs   segol
ב֓    0x593   CS   shalshelet
ב֔    0x594   Cz   zaqef qatan
ב֕    0x595   CZ   zaqef gadol
ב֖    0x596   Ct   tipeha
ב֗    0x597   Cr   revia
ב֘    0x598   Cq   zarqa
ב֙    0x599   Cp   pashta
ב֚    0x59a   C!   yetiv
ב֛    0x59b   Cv   tevir
ב֜    0x59c   Cg   geresh
ב֝    0x59d   C*   geresh qadim
ב֞    0x59e   CG   gershayim
ב֟    0x59f   CP   qarnei-parah
ב֪    0x5aa   Cy   yerach-ben-yomo
ב֫    0x5ab   Co   ole
ב֬    0x5ac   Ci   iluy
ב֭    0x5ad   Cd   dehi
ב֮    0x5ae   Cn   zinor
ב֯    0x5af   CC   masora circle

Combining forms:
ﬠ    0xfb20  X`   Alternative ayin
ﬡ    0xfb21  X'   Alternative alef
ﬢ    0xfb22  X-d  Alternative dalet
ﬣ    0xfb23  X-h  Alternative he
ﬤ    0xfb24  X-k  Alternative kaf
ﬥ    0xfb25  X-l  Alternative lamed
ﬦ    0xfb26  X-m  Alternative mem-sofit
ﬧ    0xfb27  X-r  Alternative resh
ﬨ    0xfb28  X-t  Alternative tav
﬩    0xfb29  X-+  Alternative plus
שׁ    0xfb2a  XW   shin+shin-dot
שׂ    0xfb2b  Xw   shin+sin-dot
שּׁ    0xfb2c  X..W  shin+shin-dot+dagesh
שּׂ    0xfb2d  X..w  shin+sin-dot+dagesh
אַ    0xfb2e  XA   alef+patah
אָ    0xfb2f  XO   alef+qamats
אּ    0xfb30  XI   alef+hiriq (mapiq)
בּ    0xfb31  X.b  bet+dagesh
גּ    0xfb32  X.g  gimel+dagesh
דּ    0xfb33  X.d  dalet+dagesh
הּ    0xfb34  X.h  he+dagesh
וּ    0xfb35  Xu  vav+dagesh
זּ    0xfb36  X.z  zayin+dagesh
טּ    0xfb38  X.T  tet+dagesh
יּ    0xfb39  X.y  yud+dagesh
ךּ    0xfb3a  X.K  kaf sofit+dagesh
כּ    0xfb3b  X.k  kaf+dagesh
לּ    0xfb3c  X.l  lamed+dagesh
מּ    0xfb3e  X.m  mem+dagesh
נּ    0xfb40  X.n  nun+dagesh
סּ    0xfb41  X.s  samech+dagesh
ףּ    0xfb43  X.P  pe sofit+dagesh
פּ    0xfb44  X.p  pe+dagesh
צּ    0xfb46  X.x  tsadi+dagesh
קּ    0xfb47  X.q  qof+dagesh
רּ    0xfb48  X.r  resh+dagesh
שּ    0xfb49  X.w  shin+dagesh
תּ    0xfb4a  X.t  tav+dagesh
וֹ    0xfb4b  Xo   vav+holam
בֿ    0xfb4c  XRb  bet+rafe
כֿ    0xfb4d  XRk  kaf+rafe
פֿ    0xfb4e  XRp  pe+rafe
ﭏ    0xfb4f  Xal  alef-lamed

==============================================================================
11. UTF-8を使う (Using UTF-8)		*mbyte-utf8* *UTF-8* *utf-8* *utf8*
							*Unicode* *unicode*
Unicodeは、他の文字セットをすべて含むように設計された。そのため、(ほぼ)どんな
言語のテキストでもUnicodeを使って書くことができる。そして、他のエンコーディン
グでは混在させることが不可能な言語でも、一つのファイルに混在させることが可能で
ある。

Unicodeにはいくつかのエンコード法がある。もっとも一般的なのは、1文字を 1 また
は複数バイトで表わすUTF-8であり、ASCII と後方互換性がある。MS-Windowsでは
UTF-16 も使われる(以前は UCS-2 と呼ばれていた)。こちらは 16 ビットを基本単位と
する。Nvim はこれらのエンコーディングすべてをサポートしているが、Nvim で
Unicode を使う場合、内部では常に UTF-8 が使われている。

Nvim は全角文字をサポートしており、 'guifontwide' と併用すると最適に動作する。
'guifont' のみを使用すると、全角文字は通常の幅で描画され、隙間を確保するために
スペースが使われる。

絵文字							*emoji*

以下のスクリプトを使うことで絵文字のリストを表示できる: >vim
    :source $VIMRUNTIME/scripts/emoji_list.lua
<
							*bom-bytes*
ファイルを読み込むとき、BOM (Byte Order Mark)があれば、そのUnicodeエンコーディ
ングを判別するのに使われる:
	EF BB BF     UTF-8
	FE FF        UTF-16 big endian
	FF FE        UTF-16 little endian
	00 00 FE FF  UTF-32 big endian
	FF FE 00 00  UTF-32 little endian

UTF-8 が推奨されているエンコーディングである。UTF-16 と UTF-32 を区別するのは
難しい。Windows ではUTF-16 がしばしば使われる。UTF-32 はファイルフォーマットと
しては広く使われていない。


					*mbyte-combining* *mbyte-composing*
合成文字や結合文字を使うと、先行文字の意味を変えることができる。結合文字は先行
文字に重ねて描画される。

Nvim は、Unicode 標準の拡張書記素クラスタの定義である UAX#29 にほぼ従っている
が、いくつかの変更点が存在する: ASCII文字は常に新しいクラスタを開始する。さら
に、 'arabicshape' を使用することで、一部のアラビア文字を結合し、単一のセルに
まとめて表示することができる。

結合された文字が大きすぎる場合は表示できないが、後述する |g8| および |ga| コマ
ンドを用いることで確認することはできる。
テキストの編集中は、合成文字は先行文字の一部として扱われる。例えば、初期設定で
は、"x" は文字を削除するときに、連なる合成文字をいっぺんに削除する。オプション
'delcombine' がオンのときには、'x' は1回に1文字の結合文字を削除して、最後に基
底文字を削除する。入力するときには、まず1文字目を入力して、そして合成文字を入
力する。すると、文字が合成される。"r" コマンドを使って結合文字を入力することは
できない。結合文字がさらに入力されるかどうか知ることができないからである。代わ
りに "R" を使う。
{訳注: combining character 結合文字
       composing character 合成文字
       base character      基底文字
       preceding character 先行文字？}

UTF-8として不正なバイト列はそれぞれ1バイトの文字として扱われ、<xx>と表示され
る。この "xx" はそのバイトの16進数である。

Overlong sequenceに対して特別な処理はされない。通常の文字と同じように表示され
る。Overlong sequenceはどんな検索パターンにもマッチしないかもしれない。
(Overlong sequenceとは、文字を表すために必要なバイトよりも多くのバイトでその文
字を表現しているバイト列のこと。) "<00>" と表示されているNUL(zero)は例外。
{訳注: たぶん、"<00>" と表示されてるOverlong sequenceだけはたとえ|/\_.|でもマッ
       チしないということ。}

ファイルやバッファには、Unicodeで表現できる範囲(31ビット)の文字をすべて書くこ
とができる。ただし、それを表示できるのは使用フォントがその文字を提供している場
合のみ。

便利なコマンド:
- "ga" はカーソル位置の文字のコードを10進数、16進数、8進数で表示する。合成文字
  も表示される。(表示が途切れてしまった場合は、":messages" を使う)。
- "g8" は文字のUTF-8コードを16進数で表示する。合成文字も表示される。
- ":set fileencodings=" とすると、すべてのファイルでUTF-8を使うように強制でき
  る。デフォルトでは自動的にファイルのエンコーディングを判定する。


☆Vimを起動する

メニューに使われるフォントを変える必要があるかもしれない。残念ながら、これはい
つもうまくいくとは限らない。システムに依存する説明は下記、または 'langmenu' を
参照。


X-WindowでUTF-8を使う					*utf-8-in-xwindows*

使用するフォントを選択する必要がある。全角文字を表示するにはさらに別のフォント
が必要。設定するには次の三つの方法がある:

1. 'guifont' を設定して、 'guifontwide' は Nvim に設定させる
2. 'guifont' と 'guifontwide' を設定する
3. 'guifontset' を設定する

詳細は各オプションの説明を参照。例: >

   :set guifont=-misc-fixed-medium-r-normal--15-140-75-75-c-90-iso10646-1

メニューで使用されるフォントも変更することができる。これはMotifでのみ機能する。
":hi Menu font={fontname}" コマンドを使って設定する。 |:highlight|


☆UTF-8を入力する					*utf-8-typing*

X-Window を使っている場合は、UTF-8 をサポートしているインプットメソッドを使用
する。

システムがUTF-8の入力をサポートしていない場合でも、 'keymap' を使って入力する
ことができる。ASCII文字を複数入力することでUTF-8の文字を入力するようなキーマッ
プファイルを作ることができる。 |mbyte-keymap| を参照。

すべての方法が使えなくても、4文字の16進数で文字コードを直接入力することができ
る: >

	CTRL-V u 1234

"1234" は16進数として解釈される。正しく4文字を入力しなくてはいけない。必要であ
ればゼロを前置する。


☆コマンド引数						*utf-8-char-arg*

|f|、 |F|、 |t|、 |r| のようなコマンドは一つの文字を引数に取る。UTF-8では一文字か
二文字の合成文字の場合がある。Nvimは合成文字の入力かどうかを調べるために次の入
力を待ったりはしないため、合成文字は基底文字と同時に入力する必要がある。そのよ
うな文字は 'keymap' や |:lmap| を使うと簡単に入力することができる。

行内検索をするコマンド(|f|など)は合成文字を次のように処理する。非合成文字を検
索するときは、合成されている文字とされていない文字の両方がマッチする。合成文字
を検索するときは、合成文字だけがマッチする。すべての人が合成文字を入力できるわ
けではないので、このようになっている。
{訳注: 例えば、か(U+304B) + 濁点(U+3099) という合成文字は "fか" でマッチする}

==============================================================================
12. 主なオプション (Overview of options)		*mbyte-options*

これらのオプションはマルチバイトテキストのファイルの編集に関係する。

'fileencoding'	ファイルのエンコーディング。"utf-8" と違う場合、ファイルの読み
		書き時にエンコーディングが変換される。

'fileencodings'	ファイルに使うことができるエンコーディングのリスト。ファイルを
		開くとき、リストの先頭から順番に変換を試して、エラーが起きな
		かった最初のものが 'fileencoding' として使われる。

'charconvert'	あるエンコーディングから別のエンコーディングへファイルを変換す
		る式。

'formatoptions' このオプションにフラグ 'm' を含めると、フォーマット時に、(文字
		のコードが256以上の)マルチバイト文字のところで改行することがで
		きる。これは、どこでも改行することができる言語を編集するときに
		便利である。

'guifontset'	マルチバイトエンコーディングの文字に使うフォントのリスト。この
		オプションが設定されていれば 'guifont' の代わりに使用される。

'keymap'	キーボードマッピングの名前を指定する。

==============================================================================

Contributions specifically for the multibyte features by:
	Chi-Deok Hwang <hwang@mizi.co.kr>
	SungHyun Nam <goweol@gmail.com>
	K.Nagano <nagano@atese.advantest.co.jp>
	Taro Muraoka  <koron@tka.att.ne.jp>
	Yasuhiro Matsumoto <mattn@mail.goo.ne.jp>

 vim:tw=78:ts=8:noet:ft=help:norl:
