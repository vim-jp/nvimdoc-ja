*remote_plugin.txt*    Nvim 0.12        Last change: 2025-08-24


                NVIMリファレンスマニュアル    by Thiago de Arruda


リモートプラグインの Nvim サポート		  *remote-plugin*

                                            目次を確認するには |gO| をタイプ。

==============================================================================
1. はじめに					    *remote-plugin-intro*

拡張性は、Nvim の重要な目標の一つです。Nvim 本体に直接変更を加えることなく、任
意のプログラミング言語を使用して Nvim を拡張できます。これは、Nvim プロセスと
直接通信するチャネル（ |RPC| 経由）を持つコプロセスであるリモートプラグインに
よって実現されます。

これらのプラグインはそれぞれ別のプロセスで実行されますが、まるでプラグインの
コードがメインのプロセスで実行されたかのように、イベントを呼び出したり、呼び出
されたり、受け取ったりします。

==============================================================================
2. プラグインホスト				    *remote-plugin-hosts*

プラグインは、高レベルの Nvim API と直接通信し、 |rpcrequest()| 及び |rpcnotify()| 
を介して呼び出される任意のプログラムとして実装できますが、これは最適なアプロー
チではありません。代わりに、開発者はまず選択したプログラミング言語でプラグイン
ホストが利用可能か確認する必要があります。

プラグインホストは、プラグインに高レベルな環境を提供するプログラムであり、コマ
ンド、自動コマンド、及び |RPC| 接続を介して実装される関数の定義に必要なボイラー
プレートを処理します。ホストは、登録されているいずれかのプラグインが要求したと
きにのみ実行されるため、多くのプラグインやホストがインストールされていても、
Nvim は可能な限り高速に起動します。

==============================================================================
3. サンプル					    *remote-plugin-example*

リモートプラグインについて学ぶ一番の方法はサンプルを見ることでしょう。こちらの
Python プラグインを見てみましょう。このプラグインはコマンド、関数、そして自動
コマンドをエクスポートします。プラグインの名前は 'Limit' で、行っているのは、
リクエストの数を制限することだけです。ソースコードは次のとおりです: >python

    import pynvim

    @pynvim.plugin
    class Limit(object):
        def __init__(self, vim):
            self.vim = vim
            self.calls = 0

        @pynvim.command('Cmd', range='', nargs='*', sync=True)
        def command_handler(self, args, range):
            self._increment_calls()
            self.vim.current.line = (
                'Command: Called %d times, args: %s, range: %s' % (self.calls,
                                                                   args,
                                                                   range))

        @pynvim.autocmd('BufEnter', pattern='*.py', eval='expand("<afile>")',
                        sync=True)
        def autocmd_handler(self, filename):
            self._increment_calls()
            self.vim.current.line = (
                'Autocmd: Called %s times, file: %s' % (self.calls, filename))

        @pynvim.function('Func')
        def function_handler(self, args):
            self._increment_calls()
            self.vim.current.line = (
                'Function: Called %d times, args: %s' % (self.calls, args))

        def _increment_calls(self):
            if self.calls == 5:
                raise Exception('Too many calls!')
            self.calls += 1
<

ご覧の通り、このプラグインは Python の イディオム (クラス、メソッド、デコレー
タ) を使用して実装されています。これらの言語固有のイディオムから Vimscript へ
の変換はプラグインマニフェストの生成中に行われます(次のセクションを参照)。

エクスポートされたコマンドと自動コマンドは "sync" フラグで定義されていることに
注意してください。これは Nvim がプラグインを呼び出す方法に影響します。"sync"
フラグが指定されている場合は |rpcrequest()| 関数が使用され、ハンドラ関数が値を
返すまで Nvim はブロックされます。"sync" フラグが指定されていない場合は
|rpcnotify()| による「撃ち放し」のアプローチで呼び出しが行われ、ハンドラ関数内
で返された値や例外は無視されます。

上記のプラグインをテストするには、プラグインを 'runtimepath' 内の
"rplugin/python" ディレクトリに保存しなければなりません(例:
~/.config/nvim/rplugin/python/limit.py)。そして、 |:UpdateRemotePlugins| を実行
してリモートプラグインマニフェストを生成する必要があります。

==============================================================================
4. リモートプラグインマニフェスト		    *remote-plugin-manifest*
						      *:UpdateRemotePlugins*

リモートプラグインを "rplugin/{host}" にインストールするだけでは、必要に応じて
自動的に読み込まれるようにはなりません。リモートプラグインをインストール、更
新、または削除されるたびに、 |:UpdateRemotePlugins| を実行する必要があります。

|:UpdateRemotePlugins| は、リモートプラグインマニフェストを生成します。これは、
すべてのリモートプラグインで定義されたすべての Vimscript エンティティ（コマン
ド、自動コマンド、関数）の宣言を含む特別な Vimscript ファイルで、各エンティティ
はホストとプラグインのパスに関連付けられています。

マニフェストの宣言は、 `remote#host#RegisterPlugin` 関数の呼び出しに過ぎず、宣言
されたコマンド、自動コマンド、または関数が初めて使用されるとすぐにホストのブー
トストラップを行います。

マニフェストの生成ステップは、ユーザーが異なるホストのリモートプラグインを持って
いる状況で Nvim の起動を高速化するために必要です。例えば、ユーザーが Python、
Java、.NET ホスト用の3つのプラグインを持っているとします。起動時に3つのプラグイ
ンすべてをロードすると、3つの言語ランタイムが生成され、起動に数秒もかかってし
まうかもしれません!

マニフェストがあれば、各ホストは必要な場合にのみロードされます。例えば、先程の
Java プラグインが Java コード用のセマンティック補完エンジンだとします。自動コ
マンド `BufEnter *.java` が定義されている場合、Java ホストは Nvim が "*.java" に
一致するバッファをロードした時のみ呼び出されます。

If the explicit call to |:UpdateRemotePlugins| seems inconvenient, try to see
it like this: It's a way to provide IDE capabilities in Nvim while still
keeping it fast and lightweight for general use. It's also analogous to the
|:helptags| command.
もし |:UpdateRemotePlugins| を明示的に呼び出すのが面倒に感じるのであれば、次のよ
うに考えてみてください: これは、Nvim 汎用的な利用に対する高速性と軽量性を維持
しつつ、IDE のような機能性を提供することだということです。また、 これは
|:helptags| にも類似しています。

						*$NVIM_RPLUGIN_MANIFEST*
環境変数 $NVIM_RPLUGIN_MANIFEST が設定されていない場合、マニフェストは次の場所
で `rplugin.vim` という名前のファイルに書き込まれます。

	Unix ~
	  $XDG_DATA_HOME/nvim/ or ~/.local/share/nvim/

	Windows ~
	  $LOCALAPPDATA/nvim/ or ~/AppData/Local/nvim/

 vim:tw=78:ts=8:noet:ft=help:norl:
