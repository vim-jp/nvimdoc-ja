*vi_diff.txt*   Nvim 0.12        Last change: 2025-08-24


		  VIMリファレンスマニュアル	  by Bram Moolenaar


Vim と Vi の違い					*vi-differences*

                                            目次を確認するには |gO| をタイプ。

==============================================================================
1. 制限							*limits*

Vim で編集できるファイルの制限はかなり少ないです。 {Vi: <Nul>文字を扱えず、ま
た 128をこえる文字を扱えません。行の長さにも制限がありますし、他にも多くの制限
があります。}


行の最大の長さ		   2147483647 文字。それより長い行は分割されます。
最大行数		   2147483647 行
最大のファイルのサイズ	   long integer が32ビットである場合2147483647バイト(2
			   ギガバイト)です。64ビットの長さであればもっと多くな
			   ります。またスワップファイル|swap-file|の為のディス
			   クの空き容量にも制限されます。
							*E75*
ファイルのパスの長さ	   Unix と Win32: 1024 文字、それ以外は 256 文字
			   (もしくはシステムがサポートしている長さ分だけ)
展開されたオプションの文字列の長さ
			   Unix と Win32: 1024 文字、それ以外は 256 文字
表示される最大の長さ	   Unix と Win32: 1024 文字、それ以外は 255 文字
マッピングでの lhs の最大の長さ
			   50 文字
異なるハイライトの種類の数: 30000以上
数値変数の範囲:		   -2147483648 から 2147483647 (64ビットシステムでは
			   もっと大きい場合があります) |v:numbermax|、
			   |v:numbermin| および |v:numbersize| も参照。
タグファイルにおける一行の最大の長さ: 512 バイト
							*E1541*
|/\U| および |/\%U| の最大値: 2147483647 (32 ビット整数の場合)。

アンドゥとレジスタの中のテキストに関する情報はメモリに保持されます。ですので、
使用可能な(仮想)メモリの量を超えて(大きな)変更を行っている場合はアンドゥレベル
の数とレジスタに保持されうるテキストは制限されることになります。コマンドライン
履歴やquickfixモードでのエラーメッセージなどの他のものもまたメモリに保持されま
す。

==============================================================================
2. もっとも興味深い機能追加				*vim-additions*

様々なシステムのサポート
	Vim は次のシステムで利用できます:
	- 現代的な Unix システム (BSD、Linux など)
	- Windows (XP SP 2 以上)
	- OS X

多段永続化アンドゥ						|undo|
	'u' は時をさかのぼり、'CTRL-R' は再び進めます。変更を覚えておく回数を
	'undolevels' オプションでセットしてください(初期値 1000)。'undolevels'
	を0にセットすると Vi 互換のアンドゥになります。-1 にセットするとアン
	ドゥできないようになります。
	あるバッファに対する変更をすべてアンドゥした場合は、バッファは何も変更
	されていないと見なされます。つまり <!> なしで :q で終了させることがで
	きます。
	変更をアンドゥしてその後新しい変更をすると、Vimのアンドゥツリーにブラ
	ンチが作られます。これにより、テキストを永遠に失うという危険性なしにテ
	キストをどの状態にでも戻すことができます。 |undo-tree|
	'undofile' オプションがセットされた場合には、アンドゥ情報がファイルに
	保存されます。これはつまり、Vimを一旦終了し再起動して同じファイルの編
	集をすれば、再起動前に行っていた変更もアンドゥできる、ということです。

グラフィカルユーザーインターフェイス(GUI)		|gui|
	GUI (メニュー、マウス、スクロールバー、などなど)のサポートが含められま
	した。独自のメニューを定義することもできます。CTRL/SHIFT/ALT とキーの
	組み合わではなく特殊なキーとマウスの組み合わせというよりよい方法がサ
	ポートされます。さまざまなプラットフォーム、例えば Win32でサポートされ
	ています。

複数のウィンドウとバッファ				|windows.txt|
	Vim ではスクリーンをいくつかのウィンドウに分けてそれぞれの中で異なる
	バッファを編集したり同じバッファを別の場所で編集したりできます。バッ
	ファはウィンドウに表示されていなくともロードして(変更を加えて)おくこと
	もできます。これは隠れたバッファと呼ばれます。この機能のために多くのコ
	マンドやオプションが追加されています。
	Vimはタブページを使うこともできます。各タブページは1個以上のウィンドウ
	を含みます。タブラベルを表示する行を使ってこれらのタブを素早く切替える
	ことができます。 |tab-page|

構文ハイライト						|:syntax|
	Vim ではキーワードやパターンやその他のものをハイライトすることができま
	す。これは ":syntax" コマンドで定義し、ほとんどの言語やファイルのタイ
	プに対してハイライトをつけることができます。C、C++、Java、Pascal、
	Makefiles、シェルスクリプト、などなどの多くの一般的な言語のうちのほと
	んどのためのハイライト定義ファイルはすでに含まれています。ハイライトに
	使われる色は普通の端末で定義することができ、色端末と GUI では
	|:highlight| コマンドで定義できます。色を変更するのに便利な方法は
	|:colorscheme| コマンドを使うことです。
	ハイライトされたテキストをHTMLにエクスポートすることができます
	|convert-to-HTML|。ハイライトできる他の要素は、検索文字列のマッチ部分
	'hlsearch'、対応する括弧 |matchparen|、カーソル行とカーソル桁
	'cursorline' 'cursorcolumn' です。

テキストプロパティ					|textprop.txt|
	Vimはプラグインによるテキストの強調表示をサポートしています。プロパティ
	タイプは |prop_type_add()| で指定でき、プロパティは |prop_add()| で配
	置できます。

スペルチェック						|spell|
	オプション 'spell' がセットされていると、スペリングの間違いがハイライ
	トされます。現在のところ約50の言語がサポートされています。言語はオプ
	ション 'spelllang' で選択できます。ソースコード中ではコメントと文字列
	だけがスペルチェックされます。

折り畳み						|folding|
	複数行の範囲を一行の「折り畳まれた」行として表示することができます。
	これによりファイルを一望することができ、テキストブロック間を素早く移動
	することが可能になります。折り畳みの設定は手動、ファイルのシンタック
	ス、インデント等々で設定することができます。

差分モード						|diff-mode|
	ファイルの2つのバージョンの差分をハイライトして表示することができます。
	テキストの一致する部分は折り畳みされます。コマンドを使って片方のバー
	ジョンのテキストをもう一方へ移動することができます。

プラグイン						|add-plugin|
	プラグインファイルを正しいディレクトリにただ置くだけで機能追加ができま
	す。これは他人が書いた Vim script を使い始める簡単な方法です。プラグイ
	ンは全ての種類のファイルについて設定することもできますし、ある1つのファ
	イルタイプについて設定することも可能です。
	パッケージ機能はこれをさらに簡単にします。 |packages|

非同期通信とタイマー					|job-control| |timer|
	Vim はバックグラウンドで他のプロセスとメッセージを交換できます。これに
	より、何か仕事をさせ結果を Vim に送り返すようなサーバーを実現可能にし
	ます。 |channel|
	Vim はジョブを開始させ、それと通信し、停止させられます。 |job|
	タイマーは、何かしらの仕事をする関数を、一定時間経過後に1回だけ、もし
	くは繰り返し実行することができます。 |timer|

一連のコマンドを繰り返す				|q|
	"q{c}" で名前付きレジスタ{c}にタイプする文字の記録を始めます。後に続く
	"q" は記録を終了します。そしてレジスタにあるコマンドは "@{c}" コマンド
	で実行することができます。これは複雑な動作を繰り返すときに非常に便利で
	す。

柔軟な挿入モード					|ins-special-special|
	ファイルを動き回るのに矢印キーを挿入モードで使うことができます。このこ
	とはアンドゥとリドゥを考えると挿入モードが二つに分かれることになりま
	す。

	CTRL-O は一つのノーマルモードのコマンドを実行するのに使うことができま
	す。これはつまり <Esc> キーを打ってコマンドを打ってからそれから |a| を
	打ったのとほとんど同じことです。

ビジュアルモード					|Visual-mode|
	ビジュアルモードは、初めにいくつかのテキストを選択してからそれに対して
	コマンドを実行するのに使うことができます。これは初めにオペレータコマン
	ドを与えてからそのオペレータを施すテキストの最後まで移動するコマンドを
	実行するもう一つの(簡単な)方法です。
	|v| と |V| はビジュアルモードを開始します。 |v| は文字ごとに選択し |V|
	は行ごとに選択します。カーソルを動かしてビジュアル部分を広げ、その部分
	はスクリーン上でハイライトされます。"o" を打つことでビジュアルなテキス
	ト部分の反対側の端が動かされることになります。ビジュアルなテキスト部分
	には次のオペレータを施すことができます:
		d	削除
		c	変更
		y	ヤンク
		> or <	インデントを挿入/削除
		!	外部プログラムを使ってフィルターを施す
		=	インデントを通してフィルターを施す
		:	ビジュアルな行に対して |:| コマンドを始める
		gq	'textwidth' 桁位置にテキストを整形する
		J	行を連結する
		~	大文字小文字を入れ換える
		u	小文字にする
		U	大文字にする

ブロックオペレータ					|visual-block|
	長方形のテキストがビジュアルモードを使って選択することができます。
	CTRL-V でビジュアルモードを開始します。選択されたブロックは "d" で削除
	したり 'y' でヤンクしたり大文字小文字を "~"、"u"、"U" で変えることがで
	きます。削除もしくはヤンクされたブロックは "p" か "P" コマンドでテキス
	トに挿入することができます。

ヘルプシステム						|:help|
	ヘルプはウィンドウの中に表示されます。検索したりするテキストの中を移動
	する普通のコマンドはそのまま使えます。タグも複数のヘルプファイルの間を
	移動するのに使え、ハイパーテキストのリンクをクリックするような感覚で
	す。 |:help| コマンドは引数を取りますので検索したい情報に素早くジャンプ
	できます。 <F1> を押して素早くヘルプシステムにアクセスすることもできま
	す。ヘルプファイルのインデックスファイルは 'helpfile' オプションで設定
	することができます。

コマンドライン編集/履歴					|cmdline-editing|
	カーソルキーを使うことでコマンドラインのどの場所からでも挿入を行ったり
	削除を行ったりすることができます。右/左矢印キーは前/後に一つの文字移動
	するのに使うことができ、Shift キーを押しながら右/左矢印キーを押すと前/
	後に一つの単語移動することができます。CTRL-B/CTRL-E はコマンドラインの
	初め/終わりに移動するのに使うことができます。
	{Vi: 行の最後の文字だけを変更できます}
	{Vi: <Esc> を押すとコマンドラインが実行されます。これはほとんどの人に
	とって予想外のことです。それゆえ Vim では変更されました。しかし、<Esc>
	がマッピングの一部であるときは、コマンドラインが実行されます。<Esc> を
	打ったときにもViの振る舞いをしたいなら、":cmap ^V<Esc> ^V^M" を使って
	ください。}
							|cmdline-history|
	コマンドラインは記録されます。上/下矢印キーを使うことで前のコマンドラ
	インを呼び出すことができます。 'history' オプションで覚えておく行数を
	設定することができます。検索パターンのコマンド履歴はまた別に分かれてい
	ます。

コマンドライン補完					|cmdline-completion|
	コマンドライン(スクリーンの一番下で)でなんらかの作業をしているときに 
	<Tab> キーを押すと補完を行うことができます。
	   what		 example	 ~
	- コマンド	 :e<Tab>
	- タグ		 :ta scr<Tab>
	- オプション	 :set sc<Tab>
	- オプションの値 :set hf=<Tab>
	- ファイル名	 :e ve<Tab>
	- その他

	複数マッチしたものがある場合は、CTRL-N (次)と CTRL-P (前)でマッチした
	ものの間を移動することができます。<Tab> は CTRL-N のように振る舞います
	が、マッチしたものの最後で押すと最初にマッチしたものに戻ります。

	'wildchar' オプションでコマンドライン補完に利用する文字を設定できま
	す。デフォルトは <Tab>です。複数の補完候補がある不完全な状態でCTRL-Dを
	タイプすることで、全ての補完候補を表示することができます。 CTRL-A では
	すべての候補を入力することができます。 CTRL-L では候補内で、一致する最
	長部分までを入力します。

挿入モードでの補完					|ins-completion|
	挿入モードで CTRL-N と CTRL-P を使うことでどこかに現れる単語を補完する
	ことができます。	|i_CTRL-N|
	CTRL-X を使うことでもう一つのモードに入ることができます。どの補完を行
	うことができるかというと:
	|i_CTRL-X_CTRL-F|	ファイル名
	|i_CTRL-X_CTRL-K|	辞書 'dictionary' ファイルにある単語
	|i_CTRL-X_CTRL-T|	類語辞典 'thesaurus' ファイルにある単語
	|i_CTRL-X_CTRL-I|	インクルードされるファイルにある単語
	|i_CTRL-X_CTRL-L|	すべての行
	|i_CTRL-X_CTRL-]|	タグファイルにある単語
	|i_CTRL-X_CTRL-D|	マクロ定義
	|i_CTRL-X_CTRL-O|	オムニ補完: ファイルタイプなどに特化した
				賢い補完
	|i_CTRL-X_CTRL-R|	レジスタにある内容

長い行のサポート					'wrap' 'linebreak'
	'wrap' オプションがオフであれば、長い行は折り返されずに行の一部分だけが
	表示されます。カーソルが表示されていない部分に移動するとスクリーンも横
	にスクロールします。横にスクロールする桁数の最小の値を 'sidescroll' オ
	プションで設定することができます。 |zh| と |zl| コマンドは横スクロールに
	使うことができます。あるいは、 'linebreak' オプションがセットされてい
	る場合は長い行は単語の間で切られます。こうすることで段落を一つの行にし
	て編集することが容易になります(例: 後で編集中のテキストを DTP プログラ
	ムに持っていく場合)。カーソルを上下するには |gk| と |gj| コマンドを使っ
	てください。

テキストの整形						|formatting|
	'textwidth' オプションを設定することで行の長さを自動的に制限することが
	できます。このオプションはあまり便利ではなかった Vi での 'wrapmargin'
	オプションを補助するものです。 |gq| オペレータはテキストの一部分を整形
	するのに使うことができます(例えば、 |gqap| は現在の段落を整形します)。
	テキストの位置に関するコマンドは |:center|, |:left|, |:right| です。

拡張正規表現						|pattern|
	様々なテキスト要素にマッチさせるための、多くの拡張正規表現の要素があり
	ます。例えば "\n" は改行にマッチします。
	"x\{2,4}" は、"x" が2個から4個続くテキストにマッチします。
	"\s" は空白文字にマッチします。

ディレクトリ、リモート、アーカイブの閲覧		|netrw|
	Vimはファイルシステムをブラウズすることができます。単にディレクトリを
	編集します {訳注: :e {directory} とする}。そのリスト中を普通のコマンド
	を使って移動し、 <Enter>を押すとカーソル下のディレクトリやファイルに移
	ります。
	これはftp, http, sshなど越しのリモートファイルにも機能します。
	zipとtarのアーカイブもブラウズすることができます。 |tar| |zip|

編集-コンパイル-編集 をスピードアップする		|quickfix|
	|:make| コマンドを使うことでコンパイルしてから初めのエラーにジャンプす
	ることができます。コンパイラのエラーメッセージが書かれたファイルを解析
	できます。最初のエラーにジャンプします。

	エラーファイルのそれぞれの行はファイルの名前、行番号、エラーメッセージ
	という風に調べられます。'errorformat' オプションは多くのコンパイラから
	の出力を扱うことができるように scanf のような形式の文字列のリストを指
	定することができます。

	|:cn| コマンドは次のエラーにジャンプするのに使うことができます。 |:cl|
	コマンドはすべてのエラーメッセージをリストします。他のコマンドも使うこ
	とができます。 'makeef' オプションはエラーメッセージが含まれるファイル
	の名前を指定します。 'makeprg' オプションは |:make| コマンドで実行する
	プログラムの名前を指定します。'shellpipe' オプションはコンパイラからの
	出力をエラーファイルに書き込むときに使われる文字列を指定します。

複数のファイルから検索する				|:vimgrep|
	複数のファイルからパターンを検索することができます。この機能はVimの高
	度な正規表現パターンを使い、すべてのシステム上で機能し、圧縮されたファ
	イルも検索できます。

C プログラムのインデントを改善				'cindent'
	'cindent' オプションがオンの時はそれぞれのインデントは自動的に調整され
	ます。C の文法はだいたい解釈されますし、さまざまなスタイルでのインデン
	トは 'cinoptions' で設定することができます。インデントをするきっかけと
	なるキーワードは 'cinkeys' で指定することができます。

	コメントも自動的に整形することができ、 'comments' オプションでどの文字
	がコメントをスタートさせ終了させるのかを指定することができます。この機
	能は C のコードでもっともよく動作しますがメール(行の最初の ">")や他の
	タイプのテキストでもうまく動作します。 |=| オペレータで行を再インデント
	することもできます。

	他にも多くの言語に対して自動インデントをするためのインデントプラグイン
	が提供されています。 |30.3|

インクルードされるファイルの中から単語を探す		|include-search|
	|[i| コマンドはカーソルの下の単語をインクルードされるファイルの中から
	検索することができます。'include' オプションをセットすることでファイル
	をインクルードするコマンドのパターンを記述することができます(デフォル
	トでは C のプログラムで検索できるように設定してあります)。
	|[I| コマンドはマッチしたすべてをリストし、 |[_CTRL-I| コマンドはマッチ
	した場所にジャンプするコマンドです。
	|[d|, |[D|, |[_CTRL-D| も同様ですが、 'define' オプションで指定されるパ
	ターンにマッチする行にのみします

自動コマンド						|autocommand|
	ファイルを読み込んだり書き込んだり別のバッファにジャンプしたりなどする
	時に、ファイル名によって自動的にコマンドを実行することができます。これ
	は C のプログラムを書いたり、ドキュメントを書いたり、普通のテキストを
	書いたりなどする時にオプションをセットしたりそれら特有のマッピングをし
	たりするときに便利です。これを利用することで圧縮されたファイルを編集す
	ることもできるようになります。

コマンドと表現						|expression|
	強力なスクリプト言語を形成するようにいくつかコマンドが追加されました。
	|:if|		条件によって実行します。例えば $TERM の値によってオプ
			ションを変更したりできます。
	|:while|	コマンドを繰り返します。
	|:for|		リストをわたるループ。
	|:echo|		式の結果を表示します
	|:let|		値を内部変数やオプションなどに割り当てます。
			変数の型は数値、文字列、リスト、辞書。
	|:execute|	式からなるコマンドを実行します。
	|:try|		例外を捕捉します。
	などなど。|eval|を参照。
	デバッグとプロファイリングがサポートされています。 |debug-scripts|
	|profile|
	もしこれで十分でないなら、 |Python| のインターフェイスが提供されていま
	す。

Viminfo.
	コマンドライン履歴やマークやレジスタの内容を起動時に読み込まれるファイ
	ルに保存しておくことができます。Vim を終了させた後、再び Vim を起動し
	たときでも検索コマンドを繰り返したりコマンドラインを繰り返したりできま
	す。 |'0| を使って最後に編集していた場所にジャンプすることもまた可能で
	す。'viminfo' オプションで .viminfo ファイルに保存されるアイテムを選択
	することができます。初期値はオフです。

マウスサポート						|mouse-using|
	マウスは GUI バージョンと Unix、sysmouse がある BSD、gpm がある Linux、
	Win32 上の xterm でサポートされています。カーソルの場所を変えたりビジュ
	アル領域を選択したりレジスタの内容を貼り付けたりするのに使うことができ
	ます。

キーの名前の使い方					|<>| |key-notation|
	特殊なキーはすべて <Up>、<End> などなどのような書き方ができるようにな
	りました。この名前はマッピングでも使うことができますしそれらを編集する
	のが容易になります。

バイナリファイルを編集する				|edit-binary|
	Vim はバイナリファイルを編集することができます。実行形式のファイルを
	壊すことなくいくつかの文字を変更することができます。Vim は NUL 文字を
	削除しません(内部では <NL> と表されています)。
	|-b|		バイナリファイルの編集を始める時のコマンドライン引数
	'binary'	|-b| によってセットされるオプションで、ファイルの最後の
			行に <EOL> を付加するのをやめさせます

多言語のサポート					|multi-lang|
	ダブルバイトやマルチバイトエンコーディングのファイルを編集できます。
	フォントを切り替えずに多言語を同時に編集可能なUTF-8をサポートしていま
	す。 |UTF-8|
	メッセージやメニューが多くの言語に翻訳されています。

行を越えるカーソル移動
	オプション 'virtualedit' がセットされていると、テキストがない場所を含
	め、画面全体どこでもカーソルを移動させることができます。これは表や図を
	容易に編集できて便利です。


 vim:tw=78:ts=8:noet:ft=help:norl:
