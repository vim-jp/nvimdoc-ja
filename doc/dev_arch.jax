*dev_arch.txt*          Nvim 0.12        Last change: 2025-08-24


                         NVIMリファレンスマニュアル


Nvimの開発方法およびモジュールとサブシステムの説明            *dev-arch*

各主要モジュールのファイルは、先頭にコメント形式で概要が記述されている(そうで
なければならない)。このドキュメントは以下の点を説明することである。

1. これらがどのように組み合わさっているかの概要
2. 次のような基本的なタスクの解説:
    - パブリック関数の廃止
    - 新たなパプリック (API) 関数の追加
    - 新たなパブリック (UI) イベントの追加
3. TODO: move src/nvim/README.md into this doc.

                                            目次を確認するには |gO| をタイプ。

==============================================================================
データ構造

基本的にはリストに対しては `kvec.h` を使用してだくさい。どうしてもリンクリストが
必要な場合は "intrusive" なリンクリストを定義する `lib/queue_defs.h` を使用して
ください。

==============================================================================
UI イベント

UI イベントに最も直接的に関係するソースファイルは次の通りです:
1. `src/nvim/ui.*`: 登録された UI 構造体のハンドラー関数を呼び出す(msgpack-rpc
                  とは独立)。
2. `src/nvim/api/ui.*`: msgpack-rpc 経由でメッセージをリモート UI に転送。

UI イベントは `src/nvim/api.ui_events.in.h` で定義されています。このファイルは
直接コンパイルされず、上記のソースファイルで使用されるラッパー関数を自動生成す
る `src/nvim/generators/gen_api_ui_events.lua` によって解析されます。また、
`api_info().ui_events` としてアクセス可能なメタデータも生成します。

neovim/neovim のコミット d3a8e9217f39c59dd7762bd22a76b8bd03ca85ff に新しい UI
イベントを追加する方法のサンプルがあります。

UI イベントは UI に従いますが、これは UI イベントのデータの深いコピーであるこ
とを意味します。

この開発サイクル中に NVIM_API_LEVEL を上げていない場合は、必ず上げてください。

その他の参考資料:
- |msgpack-rpc|
- |ui|
- https://github.com/neovim/neovim/pull/3246
- https://github.com/neovim/neovim/pull/18375
- https://github.com/neovim/neovim/pull/21605


==============================================================================
API

                                                        *dev-api-fast*
API 関数と Vimscript の "eval" 関数は |api-fast| としてマークできます。これは、
Lua コールバックやその他のシナリオにおいて安全に呼び出せることを意味します。
ただし、 `os_breakcheck()` を呼び出す可能性がある場合は "fast" としてマークする
ことはできません。これは、現在の実行を "yield" し、想定されていないコードの実
行を開始する可能性があるためです:
- 予期しない関数に誤って再帰する。
- "yield" された呼び出し元に戻る前に、(グローバル)状態を復元せずに変更する。

実際には、 `os_breakcheck()` を呼び出す可能性のあるコードは "fast" にはならない
ことを意味します。例えば、コミット 3940c435e405 では `nvim__get_runtime` のよ
うなバグを `os_breakcheck()` を `EW_NOBREAK` フラグを用いて明示的に禁止することで
修正しました。

"fast" ではないコードの主な例: 正規表現マッチ、 ワイルドカード展開、式の評価。


==============================================================================

vim:tw=78:ts=8:sw=4:et:ft=help:norl:
